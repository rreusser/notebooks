import{_}from"./index-DLwE0_Ng.js";import{d as l}from"./define-D1bHXsD4.js";l({root:document.getElementById("cell-114"),expanded:[],variables:[]},{id:114,body:(o,d)=>o`For fun, the diagram below shows the bits of integers represented in 32-bit IEEE-754 floating-point, starting at zero. Integers from ${d`-2^{24}\;(${(-Math.pow(2,24)).toLocaleString()})`} to ${d`2^{24}\;(${Math.pow(2,24).toLocaleString()})`} can be represented exactly. Colors represent the <span style="background-color:rgba(0, 0, 210, 0.25)">sign</span>, <span style="background-color:rgba(0, 210, 0, 0.25)">exponent</span>, and <span style="background-color:rgba(210, 0, 0, 0.25)">significand</span>.`,inputs:["md","tex"],outputs:[],output:void 0,assets:void 0,autodisplay:!0,autoview:void 0,automutable:void 0});l({root:document.getElementById("cell-132"),expanded:[],variables:[]},{id:132,body:(o,d,n)=>o(d({value:n,type:"float32",displayParts:!0,fractionalSignificand:!0})),inputs:["view","binaryInput","value"],outputs:[],output:void 0,assets:void 0,autodisplay:!1,autoview:void 0,automutable:void 0});l({root:document.getElementById("cell-133"),expanded:[],variables:[]},{id:133,body:(o,d,n)=>({value:o(function(){var e=document.createElement("canvas"),r=32,i=d/n;e.width=r,e.height=i,e.style.width=`${r*16}px`,e.style.height=`${i*n}px`,e.style.imageRendering="crisp-edges",e.style.imageRendering="pixelated";const E=e.getContext("2d");let f=0;const t=E.createImageData(r,i);var g=NaN,m=NaN;function h(){for(var s=new Float32Array(1),y=new Uint8Array(s.buffer),p=0;p<i;p++){var I=Math.floor(f/n);s[0]=I+p;for(var c=y.length-1;c>=0;c--)for(var v=7;v>=0;v--){var u=(y[c]&1<<v)>>v?255:0,b=(y.length-1-c)*8+(7-v),a=(p*r+b)*4;I+p===g?t.data[a+0]=t.data[a+1]=t[a+2]=255:b===0?(t.data[a+0]=u*3/4,t.data[a+1]=u*3/4,t.data[a+2]=127+u/2):b<9?(t.data[a+0]=u*3/4,t.data[a+1]=127+u/2,t.data[a+2]=u*3/4):(t.data[a+0]=127+u/2,t.data[a+1]=u*3/4,t.data[a+2]=u*3/4),t.data[a+3]=255}}E.putImageData(t,0,0)}return e.addEventListener("wheel",function(s){s.preventDefault(),f=f+s.deltaY,e.value=g=Math.floor(f/n)+Math.floor(m/n),h(),e.dispatchEvent(new CustomEvent("input"))}),e.addEventListener("mousemove",function(s){m=s.offsetY,e.value=g=Math.floor(f/n)+Math.floor(m/n),h(),e.dispatchEvent(new CustomEvent("input"))}),h(),e.value=0,e}())}),inputs:["view","height","verticalScale"],outputs:["value"],output:void 0,assets:void 0,autodisplay:!1,autoview:void 0,automutable:void 0});l({root:document.getElementById("cell-241"),expanded:[],variables:[]},{id:241,body:()=>({height:600}),inputs:[],outputs:["height"],output:void 0,assets:void 0,autodisplay:!1,autoview:void 0,automutable:void 0});l({root:document.getElementById("cell-240"),expanded:[],variables:[]},{id:240,body:()=>({verticalScale:2}),inputs:[],outputs:["verticalScale"],output:void 0,assets:void 0,autodisplay:!1,autoview:void 0,automutable:void 0});l({root:document.getElementById("cell-97"),expanded:[],variables:[]},{id:97,body:async(o,d)=>{const{binaryInput:n}=await _(()=>import("https://api.observablehq.com/@rreusser/binary-input.js?v=4"),[]).then(w=>{const e={},r=o.module(w.default),i=o.module();if(!r.defines("binaryInput"))throw new SyntaxError("export 'binaryInput' not found");return i.variable(e.binaryInput=d()).import("binaryInput",r),e});return{binaryInput:n}},inputs:["__ojs_runtime","__ojs_observer"],outputs:["binaryInput"],output:void 0,assets:void 0,autodisplay:!1,autoview:void 0,automutable:void 0});
