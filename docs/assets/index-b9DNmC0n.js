import{d as i,_ as M}from"./index-ByB2dbry.js";i({root:document.getElementById("cell-114"),expanded:[],variables:[]},{id:114,body:(o,d)=>o`For fun, the diagram below shows the bits of integers represented in 32-bit IEEE-754 floating-point, starting at zero. Integers from ${d`-2^{24}\;(${(-Math.pow(2,24)).toLocaleString()})`} to ${d`2^{24}\;(${Math.pow(2,24).toLocaleString()})`} can be represented exactly. Colors represent the <span style="background-color:rgba(0, 0, 210, 0.25)">sign</span>, <span style="background-color:rgba(0, 210, 0, 0.25)">exponent</span>, and <span style="background-color:rgba(210, 0, 0, 0.25)">significand</span>.`,inputs:["md","tex"],outputs:[],output:void 0,assets:void 0,autodisplay:!0,autoview:!1,automutable:void 0});i({root:document.getElementById("cell-132"),expanded:[],variables:[]},{id:132,body:(o,d,n)=>o(d({value:n,type:"float32",displayParts:!0,fractionalSignificand:!0})),inputs:["view","binaryInput","value"],outputs:[],output:void 0,assets:void 0,autodisplay:!1,autoview:void 0,automutable:void 0});i({root:document.getElementById("cell-133"),expanded:[],variables:[]},{id:133,body:(o,d,n,g)=>({value:o(function(){var e=document.createElement("canvas"),s=32,v=d/n;e.width=s,e.height=v,e.style.width=`${Math.min(g,s*16)}px`,e.style.height=`${v*n}px`,e.style.imageRendering="crisp-edges",e.style.imageRendering="pixelated";const I=e.getContext("2d");let l=0;const t=I.createImageData(s,v);var h=NaN,y=NaN;function b(){for(var r=new Float32Array(1),w=new Uint8Array(r.buffer),f=0;f<v;f++){var _=Math.floor(l/n);r[0]=_+f;for(var c=w.length-1;c>=0;c--)for(var p=7;p>=0;p--){var u=(w[c]&1<<p)>>p?255:0,E=(w.length-1-c)*8+(7-p),a=(f*s+E)*4;_+f===h?t.data[a+0]=t.data[a+1]=t[a+2]=255:E===0?(t.data[a+0]=u*3/4,t.data[a+1]=u*3/4,t.data[a+2]=127+u/2):E<9?(t.data[a+0]=u*3/4,t.data[a+1]=127+u/2,t.data[a+2]=u*3/4):(t.data[a+0]=127+u/2,t.data[a+1]=u*3/4,t.data[a+2]=u*3/4),t.data[a+3]=255}}I.putImageData(t,0,0)}return e.addEventListener("wheel",function(r){r.preventDefault(),l=l+r.deltaY,e.value=h=Math.floor(l/n)+Math.floor(y/n),b(),e.dispatchEvent(new CustomEvent("input"))}),e.addEventListener("mousemove",function(r){y=r.offsetY,e.value=h=Math.floor(l/n)+Math.floor(y/n),b(),e.dispatchEvent(new CustomEvent("input"))}),b(),e.value=0,e}())}),inputs:["view","height","verticalScale","width"],outputs:["value"],output:void 0,assets:void 0,autodisplay:!1,autoview:void 0,automutable:void 0});i({root:document.getElementById("cell-241"),expanded:[],variables:[]},{id:241,body:()=>({height:600}),inputs:[],outputs:["height"],output:void 0,assets:void 0,autodisplay:!1,autoview:void 0,automutable:void 0});i({root:document.getElementById("cell-240"),expanded:[],variables:[]},{id:240,body:()=>({verticalScale:2}),inputs:[],outputs:["verticalScale"],output:void 0,assets:void 0,autodisplay:!1,autoview:void 0,automutable:void 0});i({root:document.getElementById("cell-97"),expanded:[],variables:[]},{id:97,body:async(o,d)=>{const{binaryInput:n}=await M(()=>import("https://api.observablehq.com/@rreusser/binary-input.js?v=4"),[]).then(g=>{const m={},e=o.module(g.default),s=o.module();if(!e.defines("binaryInput"))throw new SyntaxError("export 'binaryInput' not found");return s.variable(m.binaryInput=d()).import("binaryInput",e),m});return{binaryInput:n}},inputs:["__ojs_runtime","__ojs_observer"],outputs:["binaryInput"],output:void 0,assets:void 0,autodisplay:!1,autoview:void 0,automutable:void 0});
