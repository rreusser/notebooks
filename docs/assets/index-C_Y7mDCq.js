import{d as t,_ as $}from"./index-ByB2dbry.js";t({root:document.getElementById("cell-1489"),expanded:[],variables:[]},{id:1489,body:function(){return 10},inputs:[],outputs:void 0,output:"delay",assets:void 0,autodisplay:!0,autoview:!1,automutable:!1});t({root:document.getElementById("cell-1597"),expanded:[],variables:[]},{id:1597,body:function(e){return e`This notebook implements a tiny little formatting helper. It's probably fancier than is advisable for many uses, but maybe it has its place.`},inputs:["md"],outputs:void 0,output:void 0,assets:void 0,autodisplay:!0,autoview:!1,automutable:!1});t({root:document.getElementById("cell-1666"),expanded:[],variables:[]},{id:1666,body:e=>e`delay = ${10} seconds`,inputs:["fmt"],outputs:[],output:void 0,assets:void 0,autodisplay:!0,autoview:void 0,automutable:void 0});t({root:document.getElementById("cell-273"),expanded:[],variables:[]},{id:273,body:e=>e`c = ${299792458} m/s`,inputs:["fmt"],outputs:[],output:void 0,assets:void 0,autodisplay:!0,autoview:void 0,automutable:void 0});t({root:document.getElementById("cell-921"),expanded:[],variables:[]},{id:921,body:(e,n)=>({c:e(n`c = ${299792458} m/s`)}),inputs:["view","fmt"],outputs:["c"],output:void 0,assets:void 0,autodisplay:!1,autoview:void 0,automutable:void 0});t({root:document.getElementById("cell-925"),expanded:[],variables:[]},{id:925,body:e=>e,inputs:["c"],outputs:[],output:void 0,assets:void 0,autodisplay:!0,autoview:void 0,automutable:void 0});t({root:document.getElementById("cell-1396"),expanded:[],variables:[]},{id:1396,body:function(e){return e`For brevity, the rest of this notebook omits the \`view()\` step.`},inputs:["md"],outputs:void 0,output:void 0,assets:void 0,autodisplay:!0,autoview:!1,automutable:!1});t({root:document.getElementById("cell-1613"),expanded:[],variables:[]},{id:1613,body:function(e){return e`## Trailing content`},inputs:["md"],outputs:void 0,output:void 0,assets:void 0,autodisplay:!0,autoview:!1,automutable:!1});t({root:document.getElementById("cell-677"),expanded:[],variables:[]},{id:677,body:e=>e`ρ = ${2700} kg/m³`,inputs:["fmt"],outputs:[],output:void 0,assets:void 0,autodisplay:!0,autoview:void 0,automutable:void 0});t({root:document.getElementById("cell-455"),expanded:[],variables:[]},{id:455,body:function(e,n){return e`Or if you're into ${n`\TeX`},`},inputs:["md","tex"],outputs:void 0,output:void 0,assets:void 0,autodisplay:!0,autoview:!1,automutable:!1});t({root:document.getElementById("cell-447"),expanded:[],variables:[]},{id:447,body:(e,n)=>e`ρ = ${2700} ${n`\mathrm{kg / m^3}`}`,inputs:["fmt","tex"],outputs:[],output:void 0,assets:void 0,autodisplay:!0,autoview:void 0,automutable:void 0});t({root:document.getElementById("cell-1587"),expanded:[],variables:[]},{id:1587,body:function(e){return e`## Non-numeric values`},inputs:["md"],outputs:void 0,output:void 0,assets:void 0,autodisplay:!0,autoview:!1,automutable:!1});t({root:document.getElementById("cell-865"),expanded:[],variables:[]},{id:865,body:function(e){return e`A non-numeric value passed through is displayed with the [Observable inspector](https://github.com/observablehq/inspector).`},inputs:["md"],outputs:void 0,output:void 0,assets:void 0,autodisplay:!0,autoview:!1,automutable:!1});t({root:document.getElementById("cell-1715"),expanded:[],variables:[]},{id:1715,body:async()=>{const{Inspector:e}=await $(()=>import("https://cdn.jsdelivr.net/npm/@observablehq/inspector/+esm"),[]).then(n=>{if(!("Inspector"in n))throw new SyntaxError("export 'Inspector' not found");return n});return{Inspector:e}},inputs:[],outputs:["Inspector"],output:void 0,assets:void 0,autodisplay:!1,autoview:void 0,automutable:void 0});t({root:document.getElementById("cell-680"),expanded:[],variables:[]},{id:680,body:e=>e`object = ${{foo:"bar"}}`,inputs:["fmt"],outputs:[],output:void 0,assets:void 0,autodisplay:!0,autoview:void 0,automutable:void 0});t({root:document.getElementById("cell-1694"),expanded:[],variables:[]},{id:1694,body:function(e){return e`Non-numeric values other than the value being passed through are simply stringified.`},inputs:["md"],outputs:void 0,output:void 0,assets:void 0,autodisplay:!0,autoview:!1,automutable:!1});t({root:document.getElementById("cell-1619"),expanded:[],variables:[]},{id:1619,body:e=>e`boolean = ${!0} ${{foo:"bar"}}`,inputs:["fmt"],outputs:[],output:void 0,assets:void 0,autodisplay:!0,autoview:void 0,automutable:void 0});t({root:document.getElementById("cell-1621"),expanded:[],variables:[]},{id:1621,body:function(e){return e`## HTML content`},inputs:["md"],outputs:void 0,output:void 0,assets:void 0,autodisplay:!0,autoview:!1,automutable:!1});t({root:document.getElementById("cell-894"),expanded:[],variables:[]},{id:894,body:function(e,n){return e`It passes-through the first tagged template expression value *which is not an HTML element*, so a bit of ${n`\TeX`} preceding or following the value is fine. Get creative! But use with care.`},inputs:["md","tex"],outputs:void 0,output:void 0,assets:void 0,autodisplay:!0,autoview:!1,automutable:!1});t({root:document.getElementById("cell-716"),expanded:[],variables:[]},{id:716,body:(e,n)=>e`area = ${n`\displaystyle \int_0^\pi \sin x\,dx`} = ${2}`,inputs:["fmt","tex"],outputs:[],output:void 0,assets:void 0,autodisplay:!0,autoview:void 0,automutable:void 0});t({root:document.getElementById("cell-1245"),expanded:[],variables:[]},{id:1245,body:function(e){return e`If all expression values are HTML elements, it forwards events and values from the first one with a \`value\` property, and finally otherwise just the first HTML element. This allows composition with inputs, for example Mike Bostock's [Tangle input](https://observablehq.com/@mbostock/tangle). Too straightforward not to implement, but the resulting UX is be a bit strange. Use with care.`},inputs:["md"],outputs:void 0,output:void 0,assets:void 0,autodisplay:!0,autoview:!1,automutable:!1});t({root:document.getElementById("cell-1705"),expanded:[],variables:[]},{id:1705,body:async(e,n)=>{const{Tangle:u}=await $(()=>import("https://api.observablehq.com/@mbostock/tangle.js?v=4"),[]).then(p=>{const m={},o=e.module(p.default),c=e.module();if(!o.defines("Tangle"))throw new SyntaxError("export 'Tangle' not found");return c.variable(m.Tangle=n()).import("Tangle",o),m});return{Tangle:u}},inputs:["__ojs_runtime","__ojs_observer"],outputs:["Tangle"],output:void 0,assets:void 0,autodisplay:!1,autoview:void 0,automutable:void 0});t({root:document.getElementById("cell-1561"),expanded:[],variables:[]},{id:1561,body:(e,n,u)=>({n:e(n`n = ${u({min:0,max:100,value:48})} cookies`)}),inputs:["view","fmt","Tangle"],outputs:["n"],output:void 0,assets:void 0,autodisplay:!1,autoview:void 0,automutable:void 0});t({root:document.getElementById("cell-1584"),expanded:[],variables:[]},{id:1584,body:e=>e,inputs:["n"],outputs:[],output:void 0,assets:void 0,autodisplay:!0,autoview:void 0,automutable:void 0});t({root:document.getElementById("cell-1591"),expanded:[],variables:[]},{id:1591,body:function(e){return e`## Formatting`},inputs:["md"],outputs:void 0,output:void 0,assets:void 0,autodisplay:!0,autoview:!1,automutable:!1});t({root:document.getElementById("cell-246"),expanded:[],variables:[]},{id:246,body:function(e){return e`You can pass a function or [d3-format](https://github.com/d3/d3-format) string to specify the formatting of the number.`},inputs:["md"],outputs:void 0,output:void 0,assets:void 0,autodisplay:!0,autoview:!1,automutable:!1});t({root:document.getElementById("cell-643"),expanded:[],variables:[]},{id:643,body:e=>e(n=>n.toExponential(2))`E = ${7e10} Pa`,inputs:["fmt"],outputs:[],output:void 0,assets:void 0,autodisplay:!0,autoview:void 0,automutable:void 0});t({root:document.getElementById("cell-215"),expanded:[],variables:[]},{id:215,body:e=>e(".2e")`E = ${7e10} Pa`,inputs:["fmt"],outputs:[],output:void 0,assets:void 0,autodisplay:!0,autoview:void 0,automutable:void 0});t({root:document.getElementById("cell-1049"),expanded:[],variables:[]},{id:1049,body:function(e){return e`This notebook defines a scientific notation helper \`toScientific(format = '~f')\` (aliased as \`sci\` and attached to \`fmt\` as \`fmt.sci\`), which outputs in scientific notation.`},inputs:["md"],outputs:void 0,output:void 0,assets:void 0,autodisplay:!0,autoview:!1,automutable:!1});t({root:document.getElementById("cell-1095"),expanded:[],variables:[]},{id:1095,body:(e,n)=>e(n())`E = ${7e10} Pa`,inputs:["fmt","sci"],outputs:[],output:void 0,assets:void 0,autodisplay:!0,autoview:void 0,automutable:void 0});t({root:document.getElementById("cell-1005"),expanded:[],variables:[]},{id:1005,body:(e,n)=>e(n(".3f"))`E = ${7e10} Pa`,inputs:["fmt","sci"],outputs:[],output:void 0,assets:void 0,autodisplay:!0,autoview:void 0,automutable:void 0});t({root:document.getElementById("cell-1251"),expanded:[],variables:[]},{id:1251,body:function(e){return e`Until you actually template a string, calling the \`fmt\` function simply returns a wrapped version of itself with the formatting overridden by the new value. This allows you to construct a formatter with an overridable default.`},inputs:["md"],outputs:void 0,output:void 0,assets:void 0,autodisplay:!0,autoview:!1,automutable:!1});t({root:document.getElementById("cell-1253"),expanded:[],variables:[]},{id:1253,body:(e,n)=>({myFormatter:e(n(".3f"))}),inputs:["fmt","sci"],outputs:["myFormatter"],output:void 0,assets:void 0,autodisplay:!1,autoview:void 0,automutable:void 0});t({root:document.getElementById("cell-1255"),expanded:[],variables:[]},{id:1255,body:e=>e`E = ${7e10} Pa`,inputs:["myFormatter"],outputs:[],output:void 0,assets:void 0,autodisplay:!0,autoview:void 0,automutable:void 0});t({root:document.getElementById("cell-1329"),expanded:[],variables:[]},{id:1329,body:e=>e("~f")`E = ${7e10} Pa`,inputs:["myFormatter"],outputs:[],output:void 0,assets:void 0,autodisplay:!0,autoview:void 0,automutable:void 0});t({root:document.getElementById("cell-1639"),expanded:[],variables:[]},{id:1639,body:function(e){return e`## Conclusions`},inputs:["md"],outputs:void 0,output:void 0,assets:void 0,autodisplay:!0,autoview:!1,automutable:!1});t({root:document.getElementById("cell-969"),expanded:[],variables:[]},{id:969,body:function(e){return e`That's it! I think I like it. I'm not sure. I'm tempted to unpack multiple numeric values into an array. But perhaps I've already taken this too far. [Here's the example](https://observablehq.com/d/e5b3ff47c93dfd66) which motivated this. 

Ideas and improvements are welcome! Thanks to [Job van der Zwan](https://observablehq.com/@jobleonard) for suggesting scientific notation!`},inputs:["md"],outputs:void 0,output:void 0,assets:void 0,autodisplay:!0,autoview:!1,automutable:!1});t({root:document.getElementById("cell-34"),expanded:[],variables:[]},{id:34,body:(e,n,u,p,m,o)=>({fmt:function(){function g(l){const b=document.createElement("div");new e(b).fulfilled(l);const d=b.querySelector(".observablehq--inspect");return d&&d.parentElement.removeChild(d),d}function w(l,b){const d=`inspector-${Math.floor(1e9*Math.random())}`,s=[],B=[];let r=1/0;for(let a=2;a<arguments.length;a++)if(!n(arguments[a])){r=a;break}if(r===1/0){for(let a=2;a<arguments.length;a++)if(arguments[a].value!==void 0){r=a;break}}r===1/0&&(r=2);let y,E;const i=arguments[r];let T=l&&typeof i=="number";for(var f=0;f<b.length;f++){y=f<r-1?s:B,E=f<r-1?"cellname":"number";const a={};if(E==="number"&&(a.color="#767676"),y.push(u.html`<span class="observablehq--${E}" style=${a}>${b[f]}</span>`),f===r-2&&f<arguments.length-2)if(T){const v=l?(typeof l=="string"?p.format(l):l)(i):i;y.push(u.html`<span class="observablehq--number">${v}</span>`)}else{const v=g(i);if(v)v.setAttribute("id",d),v.style.display="inline",y.push(v);else if(n(i)){const I=document.createElement("div");I.className="observablehq--number",I.style.display="inline-block",I.appendChild(i),y.push(I)}else y.push(i)}else f<arguments.length-2&&y.push(u.html`<span class="observablehq--${E}" style=${a}>${arguments[f+2]}</span>`)}const k=m`<style>#${d} > .observablehq--inspect { display: inline !important }</style>`,h=m`<span class="observablehq--inspect fmt-inspector" id="${d}">${s}${B}</span>${k}`;return n(i)?(i.addEventListener("input",a=>{h.value=i.value,h.dispatchEvent(new CustomEvent("input"))}),h.value=i.value):h.value=i,h}const x=function l(b=null){if(Array.isArray(arguments[0])){const d=[null];for(let s=0;s<arguments.length;s++)d.push(arguments[s]);return w.apply(null,d)}else return function(){if(!Array.isArray(arguments[0]))return l(arguments[0]);const d=[b];for(let s=0;s<arguments.length;s++)d.push(arguments[s]);return w.apply(null,d)}};return x.sci=o,x}()}),inputs:["Inspector","isElement","htl","d3","html","sci"],outputs:["fmt"],output:void 0,assets:void 0,autodisplay:!1,autoview:void 0,automutable:void 0});t({root:document.getElementById("cell-999"),expanded:[],variables:[]},{id:999,body:(e,n)=>{function u(p="~f"){const m=e.format(p);return function(o){let c;if(isNaN(o)||!isFinite(o))c=n`<code>${o}</code>`;else{const g=o===0?0:Math.floor(Math.log10(Math.abs(o))),w=o/Math.pow(10,g);c=n`<code>${m(w)} × 10<sup>${g}</sup></code>`}return c.value=o,c}}return{toScientific:u}},inputs:["d3","html"],outputs:["toScientific"],output:void 0,assets:void 0,autodisplay:!1,autoview:void 0,automutable:void 0});t({root:document.getElementById("cell-1124"),expanded:[],variables:[]},{id:1124,body:e=>({sci:e}),inputs:["toScientific"],outputs:["sci"],output:void 0,assets:void 0,autodisplay:!1,autoview:void 0,automutable:void 0});t({root:document.getElementById("cell-752"),expanded:[],variables:[]},{id:752,body:e=>{function n(u){try{return u instanceof e}catch{return typeof u=="object"&&u.nodeType===1&&typeof u.style=="object"&&typeof u.ownerDocument=="object"}}return{isElement:n}},inputs:["HTMLElement"],outputs:["isElement"],output:void 0,assets:void 0,autodisplay:!1,autoview:void 0,automutable:void 0});
